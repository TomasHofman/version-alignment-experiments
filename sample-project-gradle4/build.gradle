buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.maven:maven-core:3.0.4'
    }
}


plugins {
//    id 'com.gradle.build-scan' version '1.15.1'
    id 'java'
//    id "cz.malohlava" version "1.0.3" // generates task graph
//    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

// cz.malohlava config
/*visteg {
    enabled        = true
    colouredNodes  = true
    colouredEdges  = true
    destination    = 'build/reports/visteg.dot'
    exporter       = 'dot'
    colorscheme    = 'spectral11'
    nodeShape      = 'box'
    startNodeShape = 'hexagon'
    endNodeShape   = 'doubleoctagon'
}*/

apply from: './libraries.gradle'

group 'org.jboss.set.gradle4'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

allprojects {
    println 'all projects'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name 'redhat-ga'
            url 'https://maven.repository.redhat.com/ga/'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }

        /*repositories {
            mavenLocal()
        }*/
    }
}

/*dependencyManagement {
    dependencies {
        dependency 'org.jboss.logging:jboss-logging:3.3.1.Final-redhat-1'
    }
}*/

dependencies {
    compile group: 'org.jboss.logging', name: 'jboss-logging', version: jbossLoggingVersion
}

subprojects {
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

/*println "Resolved dependencies:"
configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.findAll {
    println it.toString()
}*/

// rewrite versions in generated POMs
/*install.repositories.mavenInstaller.pom.whenConfigured{pom -> pom.dependencies.findAll {
    it.setVersion(it.getVersion() + "-redhat-1")
    println it
}}*/


// following will resolve configurations.compile during build config phase, causing any further manipulation
// of dependencies to fail with "Cannot change dependencies of configuration ':compile' after it has been resolved."
/*jar {
  manifest {
      println "test"
    attributes(
      "Class-Path": configurations.compile.collect { it.getName() }.join(' '))
  }
}*/
